{"version":3,"sources":["services/jobService.js","storeContext.js","styles/global.js","components/Header/styles.js","components/Header/index.js","components/Jobs/styles.js","components/Tag/styles.js","components/Tag/index.js","components/Job/styles.js","components/Job/index.js","components/Jobs/index.js","components/Button/styles.js","components/Button/index.js","components/Search/styles.js","components/Search/index.js","App.js","serviceWorker.js","index.js"],"names":["URLS","api","axios","create","jobService","getAll","a","data","url","get","then","res","item","push","StoreContext","createContext","StoreProvider","props","useState","jobs","setJobs","cjobs","setCjobs","useEffect","storeData","Provider","value","useStoreContext","useContext","createGlobalStyle","Container","styled","div","Header","className","Tag","onClick","onSelect","text","onClose","class","Column","logo","css","labels","Link","Job","job","title","href","html_url","target","map","index","name","key","Date","created_at","toLocaleString","Jobs","button","Box","SearchBar","Input","input","Tags","Info","h3","Search","tags","setTags","stags","setStags","setText","orderBy","sortBy","undefined","length","toLowerCase","filter","includes","forEach","l","ok","label","console","log","sort","b","temp","x","Array","from","Set","onChange","e","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.42136f4f.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst URLS = [\r\n\t'https://api.github.com/repos/frontendbr/vagas/issues',\r\n\t'https://api.github.com/repos/backend-br/vagas/issues'\r\n];\r\n\r\nconst api = axios.create({});\r\n\r\nconst jobService = {\r\n    getAll: async () => {\r\n        let data = [];\r\n        for(let url of URLS) {\r\n            await api.get(url).then( (res) => {\r\n                for(let item of res.data) {\r\n                    data.push(item);\r\n                }\r\n            });\r\n\t\t}\r\n\t\treturn data;\r\n    }\r\n};\r\n\r\nexport default jobService;","import React, {createContext, useState, useContext, useEffect} from 'react';\r\n\r\nimport jobService from './services/jobService';\r\n \r\nexport const StoreContext = createContext();\r\n\r\nconst StoreProvider = (props) => {\r\n\tconst [jobs,setJobs] = useState([]);\r\n\tconst [cjobs, setCjobs] = useState([]);\r\n\r\n\tuseEffect( () => {\r\n\t\tjobService.getAll().then(res => {\r\n\t\t\tsetCjobs(res);\r\n\t\t\tsetJobs(res);\r\n\t\t});\r\n\t}, []);\r\n\tconst storeData = {\r\n\t\tjobs, setJobs,\r\n\t\tcjobs, setCjobs\r\n\t}\r\n\r\n\treturn <StoreContext.Provider value={storeData} {...props}/>\r\n}\r\n\r\n\r\nconst useStoreContext = () => {\r\n\treturn useContext(StoreContext);\r\n}\r\n\r\nexport {StoreProvider, useStoreContext};","import { createGlobalStyle } from 'styled-components';\r\n\r\n\r\nexport default createGlobalStyle`\r\n    * {\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n    \r\n    html, body, #root {\r\n        width: 100%;\r\n        height: 100%;\r\n    }\r\n`;","import styled from 'styled-components'\r\n\r\nexport const Container = styled.div`\r\n    width: 100%;\r\n    height: 70px;\r\n    background-color: grey;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    .logo {\r\n        font-size: 2rem;\r\n    }\r\n`;","import React from 'react';\r\nimport {Container} from './styles';\r\n\r\n\r\nexport default function Header() {\r\n    return <Container>\r\n        <p className=\"logo\">\r\n            JobLister\r\n        </p>\r\n    </Container>\r\n}\r\n\r\n","import styled, { css } from 'styled-components'\r\n\r\nexport const Container = styled.div`\r\n    width: 100%;\r\n`;\r\n","import styled from 'styled-components'\r\n\r\nexport const Container = styled.div`\r\n\tposition: relative;\r\n    padding: 8px 5px;\r\n    background-color: #313131;\r\n    color: #999;\r\n    border-width: 1px 1px 2px 1px;\r\n    border-style: solid;\r\n    border-color: #222;\r\n    border-radius: 5px;\r\n    text-transform: uppercase;\r\n    font-weight: 700;\r\n    font-size: .75em;\r\n    line-height: 1em;\r\n    box-shadow: 1px 1px 0 rgba(0,0,0,0.5);\r\n\r\n\tmargin: 5px 5px;\r\n\t.close {\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\tright: 0;\r\n\t}\r\n\t:hover {\r\n\t\tcursor: pointer;\r\n\t}\r\n\tuser-select: none\r\n`;","import React from 'react';\r\n\r\nimport {Container} from './styles';\r\n\r\nexport default function Tag(props) {\r\n    return <Container onClick={() => props.onSelect && props.onSelect(props.text)}>\r\n        {props.text}\r\n\t\t{props.onClose &&\r\n\t\t\t<div class=\"close\" onClick={props.onClose}>X</div>\r\n\t\t}\r\n    </Container>\r\n}","import styled, { css } from 'styled-components'\r\n\r\nexport const Container = styled.div`\r\n    width: 100%;\r\n    height: 70px;\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr 1fr 1fr;\r\n    align-items: center;\r\n`;\r\n\r\nexport const Column = styled.div`\r\n    text-align: center;\r\n    align-items:center;\r\n    ${props => (props.logo && css`text-align: left;`)\r\n        || (props.labels && css`display:flex;`)\r\n    }\r\n`;\r\n\r\nexport const Link = styled.a`\r\n    text-decoration: none;\r\n`;","import React, {useEffect} from 'react';\r\n\r\nimport Tag from '../Tag';\r\n\r\nimport {Container, Column, Link } from './styles';\r\n\r\nexport default function Job({job}) {\r\n    return <Container>\r\n\t\t<Column>\r\n\t\t\t{job.title}\r\n\t\t</Column>\r\n\t\t<Column>\r\n\t\t\t<Link href={job.html_url} target=\"_blank\">\r\n\t\t\t\tLink\r\n\t\t\t</Link>\r\n\t\t</Column>\r\n\t\t<Column labels>\r\n\t\t\t{ job.labels.map( (item, index) => \r\n\t\t\t\t<Tag text={item.name} key={index}/>\r\n\t\t\t)}\r\n\t\t</Column>\r\n\t\t<Column>\r\n\t\t{ new Date(job.created_at).toLocaleString()}\r\n\t\t</Column>\r\n    </Container>\r\n}","import React, {} from 'react';\r\n\r\nimport {useStoreContext} from '../../storeContext';\r\n\r\nimport {Container} from './styles';\r\nimport Job from '../Job';\r\n\r\n\r\nexport default function Jobs() {\r\n\tconst {cjobs} = useStoreContext();\r\n    return <Container>\r\n\t\t{cjobs && cjobs.map((item, index) => <Job key={index} job={item}></Job>)}\r\n    </Container>\r\n}","import styled from 'styled-components'\r\n\r\nexport const Container = styled.button`\r\n    text-align: center;\r\n\tborder-radius: 3px;\r\n`;","import React from 'react';\r\n\r\nimport {Container} from './styles';\r\n\r\nexport default function Tag(props) {\r\n    return <Container onClick={props.onClick}>\r\n        {props.text}\r\n    </Container>\r\n}","import styled, { css } from 'styled-components'\r\n\r\nexport const Container = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n`;\r\n\r\nexport const Box = styled.div`\r\n    margin: 0 auto;\r\n\twidth: 50%;\r\n\tmargin-bottom: 75px;\r\n\r\n\t@media(max-width: 800px) {\r\n\t\twidth: 85%;\r\n\t}\r\n` \r\nexport const SearchBar = styled.div`\r\n\twidth: 100%;\r\n\theight: 25px;\r\n\tdisplay: flex;\r\n`; \r\nexport const Input = styled.input`\r\n    width: 100%;\r\n    height: 100%;\r\n`;\r\n\r\nexport const Tags = styled.div`\r\n\tdisplay: flex;\r\n\tflex-wrap: wrap;\r\n`;\r\n\r\nexport const Info = styled.h3`\r\n\ttext-align: center;\r\n`;","import React, {useState, useEffect} from 'react';\r\n\r\nimport Button from '../Button';\r\nimport Tag from '../Tag';\r\nimport { Container, Box, Input, SearchBar, Tags, Info} from './styles';\r\n\r\n\r\nimport {useStoreContext} from '../../storeContext';\r\n\r\nexport default function Search() {\r\n\tconst [tags, setTags] = useState([]);\r\n\tconst [stags, setStags] = useState([]);\r\n\r\n\tconst [text, setText] = useState();\r\n\tconst [orderBy, setOrderBy] = useState(true)\r\n\tconst {jobs, cjobs, setCjobs, setJobs} = useStoreContext();\r\n\r\n\tconst sortBy = ({text = undefined, tags = [], orderBy = 0} = {}) => {\r\n\t\tif (text === tags && text === orderBy && tags.length === 0) {\r\n\t\t\tsetCjobs([...jobs]);\r\n\t\t} else {\r\n\t\t\tlet data = jobs;\r\n\t\t\t\r\n\t\t\tif(text) {\r\n\t\t\t\ttext = text.toLowerCase()\r\n\t\t\t\tdata = data.filter(item => item.title.toLowerCase().includes(text));\r\n\t\t\t}\r\n\t\t\tif (tags.length > 0) {\r\n\t\t\t\tdata = data.filter(item => {\r\n\t\t\t\t\tlet labels = [];\r\n\t\t\t\t\titem.labels.forEach(l => {\r\n\t\t\t\t\t\tlabels.push(l.name.toLowerCase());\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tlet ok = true;\r\n\t\t\t\t\tfor (let label of tags) {\r\n\t\t\t\t\t\tok = labels.includes(label);\r\n\t\t\t\t\t\tif (!ok) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn ok;\r\n\t\t\t\t});\r\n\t\t\t\tconsole.log(\"lol\", data)\r\n\t\t\t} \r\n\t\t\tif(orderBy) {\r\n\t\t\t\tdata.sort((a,b) => new Date(b.created_at) - new Date(a.created_at) );\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdata.sort((a,b) => new Date(a.created_at) - new Date(b.created_at));\r\n\t\t\t}\r\n\t\t\tconsole.log(stags)\r\n\t\t\tconsole.log(\"data\", data)\r\n\t\t\tsetCjobs([...data]);\r\n\t\t}\r\n\t}\r\n\tconst onSearch = (e) => {\r\n\t\tsortBy({text: text, orderBy: orderBy});\r\n\t}\r\n\tconst onReset = () => {\r\n\t\tsetCjobs(jobs);\r\n\t\tsetStags([]);\r\n\t\tsetText(\"\");\r\n\t}\r\n\tconst onSelect = (temp) => {\r\n\t\tlet data = stags;\r\n\t\tif(data.includes(temp)) {\r\n\t\t\tdata = data.filter(x => x !== temp);\r\n\t\t\tconsole.log(\"filtro:\", data)\r\n\t\t} else {\r\n\t\t\tdata.push(temp);\r\n\t\t}\r\n\t\tsetStags([...data]);\r\n\t\tsortBy({text: text, tags: data, orderBy: orderBy})\r\n\t}\r\n\tuseEffect(() => {\r\n\t\tlet labels = [];\r\n\t\tjobs.forEach(item => {\r\n\t\t\titem.labels.forEach(l => {\r\n\t\t\t\tlabels.push(l.name.toLowerCase());\r\n\t\t\t});\r\n\t\t});\r\n\t\tlabels = Array.from(new Set(labels));\r\n\t\tlabels.sort();\r\n\t\tsetTags(labels);\r\n\t},[cjobs,jobs]);\r\n    return <Container>\r\n        <Box>\r\n\t\t\t<SearchBar>\r\n\t\t\t\t<Input value={text} onChange={ (e) => setText(e.target.value)}/>\r\n\t\t\t\t<Button text=\"Search\" onClick={onSearch}> </Button>\r\n\t\t\t\t<Button text=\"Reset\" onClick={onReset}> </Button>\r\n\t\t\t</SearchBar>\r\n\t\t\t<Info>All available tags</Info>\r\n\r\n\t\t\t<Tags>\r\n\t\t\t\t{tags && tags.map((item, index) => <Tag key={index} text={item} onSelect={onSelect}/>)}\r\n\t\t\t</Tags>\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t{stags.length > 0 &&\r\n\t\t\t\t<>\r\n\t\t\t\t<Info>Selected Tags</Info>\r\n\t\t\t\t<Tags>\r\n\t\t\t\t{stags && stags.map((item, index) => <Tag text={item} key={index}/>)}\r\n\t\t\t\t</Tags>\r\n\t\t\t\t</>\r\n\t\t\t}\r\n        </Box>\r\n    </Container>\r\n}","import React, { useEffect, useState } from 'react';\nimport {StoreProvider, useStoreContext} from './storeContext';\n\nimport GlobalStyle from './styles/global';\n\nimport Header from './components/Header';\nimport Jobs from './components/Jobs';\nimport Search from './components/Search';\n\nexport default function App() {\n\treturn <StoreProvider>\n\t\t<GlobalStyle />\n\t\t<Header />\n\t\t<Search />\n\t\t<Jobs/>\n\t</StoreProvider>\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}